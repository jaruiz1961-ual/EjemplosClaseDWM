@page "/forms"
@using System.ComponentModel.DataAnnotations;


@rendermode InteractiveServer



<Validations @ref="validations" Mode="ValidationMode.Manual" Model="@user">
    <Validation>
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is2">Full Name</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is10">
                <TextEdit Placeholder="First and last name" @bind-Text="@user.Name">
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation>
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is2">Email</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is10">
                <TextEdit Placeholder="Enter email" @bind-Text="@user.Email">
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation>
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is2">Password</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is10">
                <TextEdit Role="TextRole.Password" Placeholder="Password" @bind-Text="@user.Password">
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation>
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is2">Re Password</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is10">
                <TextEdit Role="TextRole.Password" Placeholder="Retype password" @bind-Text="@user.ConfirmPassword">
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </TextEdit>
            </FieldBody>
        </Field>
    </Validation>
    <Validation>
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is2">Accept</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is2">
                <Check @bind-Checked="@user.TermsAndConditions" TValue="bool">                               
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </Check>
            </FieldBody>
        </Field>
    </Validation>
    <Validation>
        <Field Horizontal>
            <FieldLabel ColumnSize="ColumnSize.Is2">Fecha</FieldLabel>

            <FieldBody ColumnSize="ColumnSize.Is6">
                <DatePicker TValue="DateTime?"
                          @bind-Date="@user.FechaNacimiento"
                            
                            DisplayFormat="dd/MM/yyyy"
                          Placeholder="DD/MM/AAAA">
                
                    <Feedback>
                        <ValidationError />
                    </Feedback>
                </DatePicker>
            </FieldBody>
          
        </Field>
    </Validation>
    <Button Color="Color.Primary" Clicked="@Submit">Submit</Button>
</Validations>

@code {





    User user = new User();

    public class User
    {
        [Required]
        [StringLength(10, ErrorMessage = "Name is too long.")]
        public string Name { get; set; }

        [Required]
        [EmailAddress(ErrorMessage = "Invalid email.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [StringLength(8, ErrorMessage = "Must be between 5 and 8 characters", MinimumLength = 5)]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm Password is required")]
        [StringLength(8, ErrorMessage = "Must be between 5 and 8 characters", MinimumLength = 5)]
        [DataType(DataType.Password)]
        [Compare("Password")]
        public string ConfirmPassword { get; set; }

        [Required]
        public string Title { get; set; }

        [Range(typeof(bool), "true", "true", ErrorMessage = "You gotta tick the box!")]
        public bool TermsAndConditions { get; set; }

        [Required(ErrorMessage = "Fecha de Nacimiento")]
        [CustomValidation(typeof(ValidadorFechas), nameof(ValidadorFechas.ValidarFechaMaxima))]
        public DateTime? FechaNacimiento { get; set; }

        public DateTime? FechaLimite { get; set; } = DateTime.Now.AddYears(-18);

    }

    Validations validations;

    async Task Submit()
    {
        if (await validations.ValidateAll())
        {
            // do something
        }
    }

    public static class ValidadorFechas
    {
        public static ValidationResult ValidarFechaMaxima(DateTime? fechaAValidar, ValidationContext context)
        {
            // 1. Obtener la instancia del modelo (el objeto completo)
            var modelo = (User)context.ObjectInstance;

            // 2. Verificar que las fechas no sean nulas antes de comparar
            if (fechaAValidar.HasValue && modelo.FechaNacimiento.HasValue)
            {
                // 3. Realizar la comparación: ¿La fecha introducida es mayor o igual que el límite?
                if (fechaAValidar.Value.Date >= modelo.FechaLimite.Value.Date)
                {
                    // La validación FALLA
                    return new ValidationResult(
                        $"La fecha debe ser anterior a {modelo.FechaLimite.Value.ToShortDateString()}.",
                        new[] { context.MemberName! } // 'FechaInicio'
                    );
                }
            }

            // La validación pasa o el campo es nulo (la regla [Required] lo manejará)
            return ValidationResult.Success!;
        }
    }
}