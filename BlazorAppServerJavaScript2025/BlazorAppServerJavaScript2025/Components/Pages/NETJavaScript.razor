@page "/NETJavaScript"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@implements IDisposable

<h3>Llamar a  C# desde JS </h3>



<textarea id="texto" @oninput="@(e => OnInputHandler(e))"> </textarea>

@if (limiteAlcanzado)
{
    <p style="color:red;">¡Límite de caracteres alcanzado!</p>
}
else
{
    <p>Escribe hasta 10 caracteres.</p>
}

@code {

    bool limiteAlcanzado = false;

    private DotNetObjectReference<NETJavaScript> _dotNetRef;

    // 1. Inicializa y expone la referencia a JS
    protected override void OnInitialized()
    {
        // Esto está bien, ya que es código C# puro
        _dotNetRef = DotNetObjectReference.Create(this);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Llama a una función JS para guardar esta referencia
            await JSRuntime.InvokeVoidAsync("InteropSetters.setDotNetReference", _dotNetRef);
        }

    }

    //este método es llamado desde JS

    [JSInvokable]
    public void EstablecerVariable(bool nuevoValor)
    {
        // Actualiza la variable C# con el valor recibido de JS
        limiteAlcanzado = nuevoValor;

        // **IMPORTANTE**: Llama a StateHasChanged para forzar la actualización de la UI
        // (Esto es necesario porque el cambio se inició fuera del ciclo de vida normal de Blazor)
        InvokeAsync(StateHasChanged);

    }

    // 4. Limpieza: Es crucial liberar la referencia cuando el componente es destruido
    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }

    private async Task OnInputHandler(ChangeEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("InteropSetters.limitaCaractares", "texto", 10);

    }
}
