@page "/listausuarios"
@inject IUsuarioServiceAsync UsuarioService
@inject IMessageService MessageService

<h1>ListaUsuarios</h1>




<Field>
    <FieldLabel>
        Edit Mode
    </FieldLabel>
    <FieldBody>
        <Select @bind-SelectedValue="@editMode">
            <SelectItem Value="DataGridEditMode.Form">Form</SelectItem>
            <SelectItem Value="DataGridEditMode.Inline">Inline</SelectItem>
            <SelectItem Value="DataGridEditMode.Popup">Popup</SelectItem>
        </Select>
    </FieldBody>
</Field>
<DataGrid @ref="@dataGridRef"
TItem="UsuarioSet"
Data="@users"
          TotalItems="@totalUsers"
@bind-SelectedRow="@selectedUser"
ReadData="CarregarClientes"
UseInternalEditing
RowInserted="@OnRowInserted"
RowUpdated="@OnRowUpdated"
RowRemoved="@OnRowRemoved"

NewItemDefaultSetter="@OnNewItemDefaultSetter"
Editable
Responsive
ShowPager
PageSize="3"
CommandMode="DataGridCommandMode.Default"
EditMode="editMode">



    <DataGridColumns>


        <DataGridCommandColumn  NewCommandAllowed="false"   EditCommandAllowed="true" DeleteCommandAllowed="true">

            <SaveCommandTemplate>
                <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked=@context.Clicked>@context.LocalizationString</Button>
            </SaveCommandTemplate>
            <CancelCommandTemplate>
                <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </CancelCommandTemplate>
            <DeleteCommandTemplate>
                <Button Color="Color.Danger" Clicked="@(()=>OnDeleteClicked(context))">Delete</Button>
            </DeleteCommandTemplate>

        </DataGridCommandColumn>

        <DataGridDateColumn Field="@nameof(UsuarioSet.Id)" Caption="#"  Sortable="false" Displayable="true" />
        <DataGridColumn  Field="@nameof(UsuarioSet.UserName)" Caption="UserName" Editable Sortable="false" Displayable="true" />
        <DataGridColumn  Field="@nameof(UsuarioSet.Codigo)" Caption="Codigo" Editable Sortable="false" Displayable="true" />
        <DataGridColumn  Field="@nameof(UsuarioSet.NivelAcceso)" Caption="Nivel" Editable Sortable="false" Displayable="true" />
        <DataGridColumn Field="@nameof(UsuarioSet.Password)" Caption="Password" Editable Sortable="false" Displayable="true" />
        <DataGridColumn Field="@nameof(UsuarioSet.email)" Caption="email" Editable Sortable="false" Displayable="true" />

    </DataGridColumns>
    <ButtonRowTemplate>
        <Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
        @*        <Button Color="Color.Primary" Disabled="(selectedUser is null)" Clicked="context.EditCommand.Clicked">Edit</Button>*@
        @*  <Button Color="Color.Danger" Disabled="(selectedUser is null)" Clicked="@(()=>OnContextItemDeleteClicked(selectedUser))">Delete</Button>*@
        @*        <Button Color="Color.Link" Clicked="context.ClearFilterCommand.Clicked">Clear Filter</Button>*@


    </ButtonRowTemplate>
</DataGrid>

@code {
    static bool result;
    int totalUsers;

    private UsuarioSet selectedUser;
    private DataGridEditMode editMode = DataGridEditMode.Inline;

    private DataGrid<UsuarioSet>? dataGridRef;

    private List<UsuarioSet> users;

    protected override void OnInitialized()
    {
        base.OnInitialized();

    }

    async Task CarregarClientes(DataGridReadDataEventArgs<UsuarioSet> e)
    {
        var lista = await UsuarioService.FindAllAsync();
        users = lista.Skip((e.Page - 1) * e.PageSize).Take(e.PageSize).ToList();
        totalUsers = lista.Count();
        await Task.FromResult(0);
    }

    private async Task OnReadData()
    {
        users = await UsuarioService.FindAllAsync();
    }
    protected async Task OnDeleteClicked(CommandContext context)
    {
        var confirmDelete = await MessageService.Confirm("¿Quieres eliminarlo?", "Confirmar eliminación", options =>
    {
    options.CancelButtonIcon = IconName.Backward;
    options.CancelButtonText = "cancelar";
    }) ;
        if (confirmDelete)
        {
            await UsuarioService.DeleteIdAsync(selectedUser.Id);
            await context.Clicked.InvokeAsync(null);
            
        }

    }

    protected async Task OnRowUpdated(SavedRowItem<UsuarioSet, Dictionary<string, Object>> selected)
    {
        await UsuarioService.SaveUserAsync(selected.Item);


    }

    protected async Task OnRowInserted (SavedRowItem<UsuarioSet,Dictionary<string,Object>>selected)
    {
        await UsuarioService.SaveUserAsync(selected.Item);


    }
    protected async Task OnRowRemoved(UsuarioSet selected)
    {
        


    }

    protected void OnNewItemDefaultSetter(UsuarioSet selected)
    {
        selected.Id = 0;
        StateHasChanged();


    }



    
   
   
   
}







