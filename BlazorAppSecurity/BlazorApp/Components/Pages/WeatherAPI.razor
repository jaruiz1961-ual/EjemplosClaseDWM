@using System.Net.Http
@using System.Text.Json
@using Newtonsoft.Json
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@page "/weatherAPI"

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @if (forecasts != null)
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>

    <p class="text-black">@mensaje</p>
}

@code {
    private WeatherForecast[]? forecasts;

    private string mensaje = "?";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, @"https://localhost:7002/api/WeatherForecast");
            var client = ClientFactory.CreateClient();
            var response = await client.SendAsync(request);
            if (response == null) return;
            if (response.IsSuccessStatusCode)
            {

                forecasts = await response.Content.ReadFromJsonAsync<WeatherForecast[]>();
            }
        }
        catch (Exception ex)
            {
                forecasts = new WeatherForecast[] { new WeatherForecast { Date = DateOnly.FromDateTime(DateTime.Now), TemperatureC = 0, Summary = "NO data" } };
            }
        }

    }


   

}
