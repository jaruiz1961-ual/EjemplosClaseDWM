// <auto-generated />
using System;
using Domain.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250929173947_SeedUserRoles")]
    partial class SeedUserRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Credits = 3,
                            Title = "Computer Science Fundamentals",
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Credits = 4,
                            Title = "Advanced Database Management",
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Credits = 3,
                            Title = "Modern Web Applications",
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Credits = 4,
                            Title = "Algorithms and Data Structures",
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Credits = 3,
                            Title = "Software Engineering Principles",
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            Credits = 3,
                            Title = "Introduction to Artificial Intelligence",
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            StudentId = 1,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 3,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            StudentId = 1,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            StudentId = 2,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 2,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            StudentId = 2,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 4,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            StudentId = 3,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 5,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            StudentId = 4,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 6,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            StudentId = 4,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 2,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            StudentId = 5,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 3,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            StudentId = 6,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 4,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            StudentId = 7,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 11,
                            CourseId = 1,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            StudentId = 8,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 12,
                            CourseId = 5,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            StudentId = 9,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 13,
                            CourseId = 6,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            StudentId = 10,
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DateOfBirth = new DateTime(2005, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ali",
                            IdNumber = "2023001",
                            LastName = "Hassan",
                            Picture = "https://placehold.co/600x400/3498db/ffffff?text=Ali",
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DateOfBirth = new DateTime(2004, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Nour",
                            IdNumber = "2023002",
                            LastName = "Khaled",
                            Picture = "https://placehold.co/600x400/e74c3c/ffffff?text=Nour",
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DateOfBirth = new DateTime(2005, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Youssef",
                            IdNumber = "2023003",
                            LastName = "Mahmoud",
                            Picture = "https://placehold.co/600x400/2ecc71/ffffff?text=Youssef",
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DateOfBirth = new DateTime(2004, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Fatima",
                            IdNumber = "2023004",
                            LastName = "Said",
                            Picture = "https://placehold.co/600x400/f1c40f/ffffff?text=Fatima",
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DateOfBirth = new DateTime(2005, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Omar",
                            IdNumber = "2023005",
                            LastName = "Adel",
                            Picture = "https://placehold.co/600x400/9b59b6/ffffff?text=Omar",
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DateOfBirth = new DateTime(2004, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mariam",
                            IdNumber = "2023006",
                            LastName = "Gamal",
                            Picture = "https://placehold.co/600x400/1abc9c/ffffff?text=Mariam",
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DateOfBirth = new DateTime(2005, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ahmed",
                            IdNumber = "2023007",
                            LastName = "Tarek",
                            Picture = "https://placehold.co/600x400/e67e22/ffffff?text=Ahmed",
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DateOfBirth = new DateTime(2004, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Hana",
                            IdNumber = "2023008",
                            LastName = "Ibrahim",
                            Picture = "https://placehold.co/600x400/34495e/ffffff?text=Hana",
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DateOfBirth = new DateTime(2005, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Khaled",
                            IdNumber = "2023009",
                            LastName = "Ezzat",
                            Picture = "https://placehold.co/600x400/d35400/ffffff?text=Khaled",
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "System",
                            DateOfBirth = new DateTime(2004, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Salma",
                            IdNumber = "2023010",
                            LastName = "Mostafa",
                            Picture = "https://placehold.co/600x400/c0392b/ffffff?text=Salma",
                            UpdatedAt = new DateTime(2025, 9, 20, 16, 53, 0, 0, DateTimeKind.Utc),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
